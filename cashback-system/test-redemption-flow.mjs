import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://mtylboaluqswdkgljgsd.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im10eWxib2FsdXFzd2RrZ2xqZ3NkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE0Nzc5OTAsImV4cCI6MjA3NzA1Mzk5MH0.heq_wso726i0TJSWTMzIWoD61GXnEWzkFw3Iy06YSqI'
);

async function testRedemptionFlow() {
  console.log('üß™ Testando fluxo completo de resgate...\n');

  // 1. Buscar cliente
  console.log('1Ô∏è‚É£ Buscando cliente...');
  const { data: customer } = await supabase
    .from('customers')
    .select('*')
    .eq('phone', '61992082577')
    .single();

  console.log('‚úÖ Cliente encontrado');
  console.log('   Saldo atual: R$', customer.available_cashback);

  const initialBalance = customer.available_cashback;

  // 2. Buscar merchant e employee
  const { data: merchant } = await supabase
    .from('merchants')
    .select('*')
    .limit(1)
    .single();

  const { data: employee } = await supabase
    .from('employees')
    .select('*')
    .eq('merchant_id', merchant.id)
    .limit(1)
    .single();

  // 3. Criar resgate
  console.log('\n2Ô∏è‚É£ Criando resgate de teste...');
  const redemptionAmount = 2; // R$ 2,00
  
  const { data: redemption, error: redemptionError } = await supabase
    .from('redemptions')
    .insert({
      merchant_id: merchant.id,
      customer_id: customer.id,
      employee_id: employee.id,
      amount: redemptionAmount,
      qr_code_token: `TEST_REDEMPTION_${Date.now()}`,
      status: 'pending'
    })
    .select()
    .single();

  if (redemptionError) {
    console.error('‚ùå Erro ao criar resgate:', redemptionError);
    return;
  }

  console.log('‚úÖ Resgate criado (pending)');
  console.log('   ID:', redemption.id);
  console.log('   Valor: R$', redemption.amount);

  // 4. Marcar como completado (simula cliente escaneando QR)
  console.log('\n3Ô∏è‚É£ Marcando resgate como completado...');
  
  const { error: updateError } = await supabase
    .from('redemptions')
    .update({ status: 'completed' })
    .eq('id', redemption.id);

  if (updateError) {
    console.error('‚ùå Erro ao completar resgate:', updateError);
    return;
  }

  console.log('‚úÖ Resgate marcado como completed');

  // 5. Aguardar trigger executar
  await new Promise(resolve => setTimeout(resolve, 1500));

  // 6. Verificar saldo atualizado
  console.log('\n4Ô∏è‚É£ Verificando saldo do cliente...');
  
  const { data: updatedCustomer } = await supabase
    .from('customers')
    .select('available_cashback')
    .eq('id', customer.id)
    .single();

  console.log('Saldo antes: R$', initialBalance);
  console.log('Valor resgatado: R$', redemptionAmount);
  console.log('Saldo esperado: R$', initialBalance - redemptionAmount);
  console.log('Saldo atual: R$', updatedCustomer.available_cashback);

  // 7. Verificar se funcionou
  const expectedBalance = initialBalance - redemptionAmount;
  
  if (Math.abs(updatedCustomer.available_cashback - expectedBalance) < 0.01) {
    console.log('\n‚úÖ‚úÖ‚úÖ RESGATE FUNCIONANDO PERFEITAMENTE! ‚úÖ‚úÖ‚úÖ');
    console.log('\nüéâ O sistema est√° 100% funcional!');
    console.log('   - Cashback √© creditado imediatamente ‚úÖ');
    console.log('   - Hist√≥rico aparece corretamente ‚úÖ');
    console.log('   - Resgate deduz saldo automaticamente ‚úÖ');
  } else {
    console.log('\n‚ùå ERRO: Saldo n√£o foi atualizado corretamente!');
    console.log('Diferen√ßa:', updatedCustomer.available_cashback - expectedBalance);
  }
}

testRedemptionFlow();
